package com.grant.smith;

import java.util.ArrayList;

public class HeapSort 
{
    private static List<SavingsNode> a;
    private static int n;
    private static int left;
    private static int right;
    private static int largest;

    
    public static void buildheap(List<SavingsNode> a){
        n=a.size()-1;
        for(int i=n/2;i>=0;i--){
            maxheap(a,i);
        }
    }
    
    public static void maxheap(List<SavingsNode> a, int i){ 
        left=2*i;
        right=2*i+1;
        if(left <= n && a.get(left).saving > a.get(i).saving){
            largest=left;
        }
        else{
            largest=i;
        }
        
        if(right <= n && a.get(right).saving > a.get(largest).saving){
            largest=right;
        }
        if(largest!=i){
            exchange(i,largest);
            maxheap(a, largest);
        }
    }
    
    public static void exchange(int i, int j){
    	SavingsNode t = a.get(i);
        a.set(i, a.get(j));
        a.set(j, t); 
    }
    
    public static void sort(List<SavingsNode> a0){
        a=a0;
        buildheap(a);
        
        for(int i=n;i>0;i--){
            exchange(0, i);
            n=n-1;
            maxheap(a, 0);
        }
    }
    
}