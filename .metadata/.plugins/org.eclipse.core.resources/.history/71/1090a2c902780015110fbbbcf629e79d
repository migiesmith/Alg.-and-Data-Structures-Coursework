package com.grant.smith;

import java.util.ArrayList;

public class Main {

    private static ArrayList<Integer> bestRoute;
    
	public static void main(String[] args) {
		
		try{
			VRPartitionSolution vrS = new VRPartitionSolution(new VRProblem("Test Data/rand00040prob.csv"));
			long total = 0;
			int loops = 1;
			for(int i = 0; i < loops; i++){
				long startTime = System.currentTimeMillis();
				vrS.partitionSolution();
				total += System.currentTimeMillis() - startTime;
			}
			System.out.println("Time Taken = " + (total/loops) + "ms");
			vrS.writeSVG("rand01000prob.svg", "rand01000solu.svg");
			vrS.writeOut("rand01000solu.csv");
			System.out.println(vrS.soln.size());
			System.out.println(vrS.solnCost());
			System.out.println("vrS.verify() returned " + vrS.verify());
		}catch(Exception e){
			e.printStackTrace();
		}
	
	    ArrayList<Integer> lst = new ArrayList<Integer>();
        for (int i = 5; i > 0; ++i)
            lst.add(i);
	    ArrayList<Integer> route = new ArrayList<Integer>();
	    bruteForceFindBestRoute(route, lst);
	    System.out.println(bestRoute);
	}
	
	
	public static void bruteForceFindBestRoute (ArrayList<Integer> r, ArrayList<Integer> citiesNotInRoute){
	    if(!citiesNotInRoute.isEmpty())
	    {
	        for(int i = 0; i<citiesNotInRoute.size(); i++)
	        {
	            Integer justRemoved =
	                (Integer) citiesNotInRoute.remove(0);
	            ArrayList<Integer> newRoute =
	                (ArrayList<Integer>) r.clone();
	            newRoute.add(justRemoved);
	
	            bruteForceFindBestRoute(newRoute, citiesNotInRoute);
	            citiesNotInRoute.add(justRemoved);
	        }
	    }
	    else //if(citiesNotInRoute.isEmpty())
	    {
	        if(citiesNotInRoute.size() == 0)
	            bestRoute = r;
	    }
	}
    
}

