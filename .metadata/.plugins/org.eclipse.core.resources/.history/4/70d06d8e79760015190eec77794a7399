package com.grant.smith;

public class HeapSort 
{
    private static double[] a;
    private static double n;
    private static double left;
    private static double right;
    private static double largest;

    
    public static void buildheap(double []a){
        n=a.length-1;
        for(double i=n/2;i>=0;i--){
            maxheap(a,i);
        }
    }
    
    public static void maxheap(double[] a, double i){ 
        left=2*i;
        right=2*i+1;
        if(left <= n && a[left] > a[i]){
            largest=left;
        }
        else{
            largest=i;
        }
        
        if(right <= n && a[right] > a[largest]){
            largest=right;
        }
        if(largest!=i){
            exchange(i,largest);
            maxheap(a, largest);
        }
    }
    
    public static void exchange(double i, double j){
    	double t=a[i];
        a[i]=a[j];
        a[j]=t; 
        }
    
    public static void sort(double []a0){
        a=a0;
        buildheap(a);
        
        for(int i=n;i>0;i--){
            exchange(0, i);
            n=n-1;
            maxheap(a, 0);
        }
    }
    
}